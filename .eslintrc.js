module.exports = {
    parser: '@babel/eslint-parser',
    extends: [
        'standard',
        'plugin:json/recommended',
    ],
    plugins: [
        'json',
        'unicorn',
        'react',
        'react-hooks',
        'jsdoc',
    ],
    env: {
        'shared-node-browser': true,
        es6: true,
    },
    parserOptions: {
        ecmaVersion: 2020,
        ecmaFeatures: {
            jsx: true,
        },
        sourceType: 'module',
    },
    globals: {
        fetch: true,
        Promise: true,
        WebSocket: true,
        OverlayPluginApi: true,
    },
    settings: {
        react: {
            pragma: 'h',
            version: 'latest',
        },
        jsdoc: {
            tagNamePreference: {
                class: 'constructor',
            },
            preferredTypes: {
                object: 'Object',
            },
        },
    },
    rules: {
        'require-jsdoc': [1, {
            require: {
                FunctionDeclaration: true,
                MethodDefinition: true,
                ClassDeclaration: false,
                ArrowFunctionExpression: true,
            },
        }],
        'valid-jsdoc': [1, {
            prefer: {
                arg: 'param',
                argument: 'param',
                return: 'returns',
            },
            requireParamDescription: false,
            requireReturnDescription: false,
            requireReturnType: true,
            requireReturn: true,
        }],
        'jsdoc/check-alignment': 2,
        'jsdoc/check-indentation': 2,
        'jsdoc/check-param-names': [2, { checkDestructured: false }],
        'jsdoc/check-syntax': 2,
        'jsdoc/check-tag-names': 2,
        'jsdoc/check-types': 2,
        'jsdoc/implements-on-classes': 2,
        'jsdoc/newline-after-description': 2,
        'jsdoc/require-description-complete-sentence': 2,
        'jsdoc/require-jsdoc': 2,
        'jsdoc/require-param': [2, { checkDestructured: false, checkDestructuredRoots: false, unnamedRootBase: ['props', 'args'] }],
        'jsdoc/require-param-name': 2,
        'jsdoc/require-param-type': 2,
        'jsdoc/require-returns': 2,
        'jsdoc/require-returns-check': 2,
        'jsdoc/require-returns-type': 2,
        'jsdoc/valid-types': 2,
        'jsx-quotes': [2, 'prefer-double'],
        'react/forbid-dom-props': [2, { forbid: ['className'] }],
        'react/jsx-boolean-value': 2,
        'react/jsx-closing-bracket-location': [2, 'line-aligned'],
        'react/jsx-closing-tag-location': 2,
        'react/jsx-curly-brace-presence': [2, { props: 'never', children: 'never' }],
        'react/jsx-curly-newline': [2, {
            multiline: 'require',
            singleline: 'consistent',
        }],
        'react/jsx-curly-spacing': [2, { when: 'never', children: { when: 'always' } }],
        'react/jsx-equals-spacing': [2, 'never'],
        'react/jsx-filename-extension': [1, { extensions: ['.js', '.jsx'] }],
        'react/jsx-first-prop-new-line': [2, 'multiline-multiprop'],
        'react/jsx-indent': [2, 4, { indentLogicalExpressions: true }],
        'react/jsx-indent-props': [2, 4],
        'react/jsx-max-depth': [2, { max: 10 }],
        'react/jsx-max-props-per-line': [2, { when: 'multiline' }],
        'react/jsx-no-bind': [2, {
            allowArrowFunctions: true,
            allowBind: false,
            ignoreRefs: true,
        }],
        'react/jsx-no-comment-textnodes': 2,
        'react/jsx-no-duplicate-props': 2,
        'react/jsx-no-script-url': 2,
        'react/jsx-no-target-blank': [2, { allowReferrer: true }],
        'react/jsx-no-undef': 2,
        'react/jsx-no-useless-fragment': 2,
        'react/jsx-pascal-case': [2, { ignore: ['GTM', 'default'] }],
        'react/jsx-tag-spacing': [2, { beforeSelfClosing: 'always', beforeClosing: 'never' }],
        'react/jsx-uses-react': 2,
        'react/jsx-uses-vars': 2,
        'react/jsx-wrap-multilines': [2, {
            declaration: 'parens-new-line',
            assignment: 'parens-new-line',
            return: 'parens-new-line',
            arrow: 'parens-new-line',
            condition: 'parens-new-line',
            logical: 'parens-new-line',
        }],
        'react/no-access-state-in-setstate': 2,
        'react/no-array-index-key': 2,
        'react/no-children-prop': 2,
        'react/no-danger-with-children': 2,
        'react/no-did-update-set-state': 2,
        'react/no-direct-mutation-state': 2,
        'react/no-find-dom-node': 2,
        'react/no-is-mounted': 2,
        'react/no-render-return-value': 2,
        'react/no-string-refs': 2,
        'react/no-this-in-sfc': 2,
        'react/no-typos': 2,
        'react/no-unescaped-entities': 2,
        'react/no-will-update-set-state': 2,
        'react/prefer-stateless-function': 2,
        'react/react-in-jsx-scope': 2,
        'react/require-render-return': 2,
        'react/self-closing-comp': 2,
        'react/state-in-constructor': 2,
        'react-hooks/exhaustive-deps': 2,
        'react-hooks/rules-of-hooks': 2,
        'array-callback-return': [2, { allowImplicit: true }],
        'array-element-newline': [2, 'consistent'],
        'arrow-body-style': [2, 'as-needed', {
            requireReturnForObjectLiteral: false,
        }],
        'arrow-parens': [2, 'always', {
            requireForBlockBody: true,
        }],
        'arrow-spacing': [2, { before: true, after: true }],
        'brace-style': [2, '1tbs', { allowSingleLine: false }],
        'comma-dangle': [2, {
            arrays: 'always-multiline',
            objects: 'always-multiline',
            imports: 'always-multiline',
            exports: 'always-multiline',
            functions: 'always-multiline',
        }],
        complexity: [2, { max: 45 }],
        curly: [2, 'all'],
        'func-style': [2, 'expression'],
        'function-paren-newline': [2, 'consistent'],
        'import/exports-last': 2,
        'import/extensions': [2, 'never', { svg: 'always', worker: 'always', json: 'always' }],
        'import/no-self-import': 2,
        'import/no-unused-modules': 2,
        'import/no-useless-path-segments': 2,
        indent: [2, 4, {
            SwitchCase: 1,
            VariableDeclarator: 1,
            outerIIFEBody: 1,
            MemberExpression: 1,
            FunctionDeclaration: { parameters: 1, body: 1 },
            FunctionExpression: { parameters: 1, body: 1 },
            CallExpression: { arguments: 1 },
            ArrayExpression: 1,
            ObjectExpression: 1,
            ImportDeclaration: 1,
            flatTernaryExpressions: false,
            ignoreComments: false,
        }],
        'keyword-spacing': 2,
        'linebreak-style': [2, 'unix'],
        'max-classes-per-file': [2, 2],
        'max-depth': 2,
        'max-len': [2, { code: 140, ignoreComments: true }],
        'max-nested-callbacks': 2,
        'max-statements-per-line': 2,
        'multiline-ternary': 0,
        'no-alert': 2,
        'no-console': 1,
        'no-const-assign': 2,
        'no-duplicate-imports': 2,
        'no-else-return': 2,
        'no-empty': 0,
        'no-eq-null': 2,
        'no-extra-semi': 2,
        'no-irregular-whitespace': 2,
        'no-lonely-if': 2,
        'no-loop-func': 2,
        'no-mixed-requires': 2,
        'no-multi-assign': 2,
        'no-multi-spaces': 2,
        'no-multiple-empty-lines': [2, { max: 1, maxEOF: 0, maxBOF: 0 }],
        'no-script-url': 2,
        'no-useless-concat': 2,
        'no-var': 2,
        'object-curly-spacing': [2, 'always'],
        'object-shorthand': [2, 'always'],
        'operator-assignment': [2, 'always'],
        'padding-line-between-statements': [
            2,
            { blankLine: 'always', prev: ['const', 'let', 'var', 'if'], next: '*' },
            { blankLine: 'always', prev: '*', next: ['if', 'return'] },
            { blankLine: 'any', prev: ['const', 'let', 'var'], next: ['const', 'let', 'var'] },
            { blankLine: 'always', prev: ['import', 'cjs-import'], next: '*' },
            { blankLine: 'always', prev: '*', next: ['import', 'cjs-import'] },
            {
                blankLine: 'any',
                prev: ['import', 'cjs-import'],
                next: ['import', 'cjs-import'],
            },
        ],
        'prefer-arrow-callback': [2, {
            allowNamedFunctions: false,
            allowUnboundThis: true,
        }],
        'prefer-const': [2, {
            destructuring: 'any',
            ignoreReadBeforeAssign: true,
        }],
        'prefer-numeric-literals': 2,
        'prefer-spread': 2,
        'prefer-template': 2,
        'promise/no-return-wrap': 2,
        'promise/valid-params': 2,
        'quote-props': [2, 'as-needed', { keywords: false, unnecessary: true, numbers: false }],
        'require-await': 2,
        'require-yield': 2,
        semi: [2, 'always'],
        'semi-style': [2, 'last'],
        'switch-colon-spacing': 2,
        'template-tag-spacing': [2, 'never'],
        'unicorn/catch-error-name': 2,
        'unicorn/error-message': 2,
        'unicorn/escape-case': 2,
        'unicorn/expiring-todo-comments': 2,
        'unicorn/filename-case': [2, {
            cases: {
                camelCase: true,
                pascalCase: true,
            },
            ignore: [
                /^[A-Z]+\.js$/,
                /^[A-Z]+\.[a-z]+\.?js$/,
                /^[a-z]+([A-Z][a-z]+)*[A-Z]+\.?js$/,
            ],
        }],
        'unicorn/new-for-builtins': 2,
        'unicorn/no-abusive-eslint-disable': 2,
        'unicorn/no-array-instanceof': 2,
        'unicorn/no-console-spaces': 2,
        'unicorn/no-hex-escape': 2,
        'no-nested-ternary': 0,
        'unicorn/no-nested-ternary': 2,
        'unicorn/no-new-buffer': 2,
        'unicorn/no-unreadable-array-destructuring': 2,
        'unicorn/no-unused-properties': 2,
        'unicorn/no-zero-fractions': 2,
        'unicorn/number-literal-case': 2,
        'unicorn/prefer-dataset': 2,
        'unicorn/prefer-event-key': 2,
        'unicorn/prefer-negative-index': 2,
        'unicorn/prefer-node-remove': 2,
        'unicorn/prefer-spread': 2,
        'unicorn/prefer-string-slice': 2,
        'unicorn/prefer-text-content': 2,
        'unicorn/prefer-type-error': 2,
        'unicorn/regex-shorthand': 2,
        'unicorn/throw-new-error': 2,
    },
};
